panel.grid.minor  = element_blank(),
plot.margin		= unit(c(1.5,1.5,1.5,1.5), "lines")
)
}
pal <- brewer.pal(4,'Blues')
kk <- ggplot(hall)
kk1 <- kk + geom_bar(aes(x=class2, y=count, fill=pop2), colour='black',stat='identity',position='dodge')
kk2 <- kk1 + theme_mine() + theme(legend.position=c(0.8,0.5))
kk3 <- kk2 + scale_y_continuous(expand=c(0,0)) + scale_fill_manual(values=pal)
kk3 + xlab('minor allele frequency') + ylab('no. of SNPs')
kk2 <- kk1 + theme_mine() + theme(legend.position=c(0.8,0.5), axis.text.x=element_text(angle=60))
kk3 <- kk2 + scale_y_continuous(expand=c(0,0), s) + scale_fill_manual(values=pal)
kk3 + xlab('minor allele frequency') + ylab('no. of SNPs')
kk2 <- kk1 + theme_mine() + theme(legend.position=c(0.8,0.5), axis.text.x=element_text(angle=60))
kk3 <- kk2 + scale_y_continuous(expand=c(0,0), limits=c(0,40000)) + scale_fill_manual(values=pal)
kk3 + xlab('minor allele frequency') + ylab('no. of SNPs')
library(data.table)
calls <- read.table('5pop_590_86k.calls', header=T)
info.pa <- read.table('bysnp_86k_maf_pa.txt', header=T)
info.pd <- read.table('bysnp_86k_maf_pd.txt', header=T)
info.ph <- read.table('bysnp_86k_maf_ph.txt', header=T)
info.pt <- read.table('bysnp_86k_maf_pt.txt', header=T)
info.pv <- read.table('bysnp_86k_maf_pv.txt', header=T)
info <- read.table('bysnp_86k_maf_4pop.txt', header=T)
View(info)
info <- read.table('5pop_590_86k.info', header=T)
View(info)
calculateLD <- function(b1,b2) {
b3 <- !is.na(b1) & !is.na(b2)
b1 <- b1[b3]
b2 <- b2[b3]
b0 <- sum(b1 & b2)
b1 <- sum(b1)
b2 <- sum(b2)
b3 <- sum(b3)
c <- list()
c$dp <- b0*b3 - b1*b2
c$r2 <- c$dp * c$dp / b1 / b2 / (b3-b1) / (b3-b2)
if (c$dp < 0) {
c$dp <- -c$dp / min((b3-b1)*(b3-b2),b1*b2)
} else if (c$dp > 0) {
c$dp <-  c$dp / min(b1*(b3-b2),(b3-b1)*b2)
} else {
c$dp <- 1
}
if (is.na(c$r2)) { c$r2 <- 0 }
c
}
info <- read.table('5pop_590_86k.info', header=T)
View(info.pa)
majorallele = function(bysnp) {
if(bysnp['maf']==0.5)
major <- which(bysnp[1:4]==as.numeric(bysnp['minor']))[[1]][[1]]
else if(bysnp['zero.alleles']==2){
major <- which(bysnp[1:4]>as.numeric(bysnp['minor']))[[1]]}
else{
major <- which(bysnp[1:4]>0)[[1]]}
return(major)
}
major <- apply(info.pa, 1, majorallele)
major2 <- as.character(factor(major, labels=c('A','T','C','G')))
info.pa$Major <- major2
major <- apply(info.pd, 1, majorallele)
major2 <- as.character(factor(major, labels=c('A','T','C','G')))
info.pd$Major <- major2
major <- apply(info.ph, 1, majorallele)
major2 <- as.character(factor(major, labels=c('A','T','C','G')))
info.ph$Major <- major2
major <- apply(info.pt, 1, majorallele)
major2 <- as.character(factor(major, labels=c('A','T','C','G')))
info.pt$Major <- major2
info$Major.pa <- info.pa$Major
info$Major.pd <- info.pd$Major
info$Major.ph <- info.ph$Major
info$Major.pt <- info.pt$Major
info$Major.pv <- info.pv$Major
info$maf.pa <- info.pa$maf
info$maf.pd <- info.pd$maf
info$maf.ph <- info.ph$maf
info$maf.pt <- info.pt$maf
info$maf.pv <- info.pv$maf
cat("Calls\n")
e <- list()
e$calls <- calls[,grep('PT',colnames(calls))]
cat("Reference\n")
e$ref <- matrix(rep(info$Major.pa,ncol(calls[,grep('PA',colnames(calls))])),nrow=nrow(calls),ncol=ncol(calls[,grep('PA',colnames(calls))]))
cat("Binary\n")
e$binary <- e$calls == e$ref
ld <- matrix(0,nrow=10000000,ncol=3)
start <- Sys.time ()
base <- 0
count <- 1
skipcount <- 0
partcount <- 0
for (i in 1:14) {
cat("Chromosome",i,"\n")
#chromosome <- sprintf("Pf3D7_%02d_v3",i)
dc <- subset(info, ChrIndex==i)
for (j in 1:nrow(dc)) {
if (dc$maf.pa[j]>=0.05) {
b <- dc$Position > dc$Position[j] & dc$Position < dc$Position[j] + 1000
alternates <- e$binary[base+j,]
for (k in (1:length(b))[b]) {
if (dc$maf.pa[k]>=0.05) {
temp <- calculateLD(alternates,e$binary[base+k,])
ld[count,] <- c(dc$Position[k]-dc$Position[j],temp$r2,temp$dp)
if (0 == count %% 1000) { cat(count,Sys.time () - start,"\n") }
count <- count + 1
}
}
}
}
base <- base + nrow(dc)
}
ld.pa <- ld[1:count,]
ld.pa <- data.frame(ld.pa)
colnames(ld.pa) <- c('distance','r2','D\'')
ld.pa <- data.table(ld.pa)
ld.pa$bin <- cut(ld.pa$distance, 200)
ldbin.pa <- ld.pa[,list(r2=mean(r2), distance=median(distance)), by=bin]
write.table(ldbin.pa, 'LDbin_PA.txt', sep='\t', col.names=T, row.names=F, quote=F)
View(info)
write.table(info, '5pop_590_86k_forLD.info', col.names=T, row.names=F, quote=F)
cat("Calls\n")
e <- list()
e$calls <- calls[,grep('PA',colnames(calls))]
cat("Reference\n")
e$ref <- matrix(rep(info$Major.pa,ncol(calls[,grep('PA',colnames(calls))])),nrow=nrow(calls),ncol=ncol(calls[,grep('PA',colnames(calls))]))
cat("Binary\n")
e$binary <- e$calls == e$ref
ld <- matrix(0,nrow=10000000,ncol=3)
start <- Sys.time ()
base <- 0
count <- 1
skipcount <- 0
partcount <- 0
for (i in 1:14) {
cat("Chromosome",i,"\n")
#chromosome <- sprintf("Pf3D7_%02d_v3",i)
dc <- subset(info, ChrIndex==i)
for (j in 1:nrow(dc)) {
if (dc$maf.pa[j]>=0.05) {
b <- dc$Position > dc$Position[j] & dc$Position < dc$Position[j] + 1000
alternates <- e$binary[base+j,]
for (k in (1:length(b))[b]) {
if (dc$maf.pa[k]>=0.05) {
temp <- calculateLD(alternates,e$binary[base+k,])
ld[count,] <- c(dc$Position[k]-dc$Position[j],temp$r2,temp$dp)
if (0 == count %% 1000) { cat(count,Sys.time () - start,"\n") }
count <- count + 1
}
}
}
}
base <- base + nrow(dc)
}
ld.pa <- ld[1:count,]
ld.pa <- data.frame(ld.pa)
colnames(ld.pa) <- c('distance','r2','D\'')
#save(ld.pt,file= "LD_pt_1000_MAFdblflag.Rdata")
ld.pa <- data.table(ld.pa)
ld.pa$bin <- cut(ld.pa$distance, 200)
ldbin.pa <- ld.pa[,list(r2=mean(r2), distance=median(distance)), by=bin]
write.table(ldbin.pa, 'LDbin_PA.txt', sep='\t', col.names=T, row.names=F, quote=F)
cat("Calls\n")
e <- list()
e$calls <- calls[,grep('PD',colnames(calls))]
cat("Reference\n")
e$ref <- matrix(rep(info$Major.pd,ncol(calls[,grep('PD',colnames(calls))])),nrow=nrow(calls),ncol=ncol(calls[,grep('PD',colnames(calls))]))
cat("Binary\n")
e$binary <- e$calls == e$ref
ld <- matrix(0,nrow=10000000,ncol=3)
start <- Sys.time ()
base <- 0
count <- 1
skipcount <- 0
partcount <- 0
for (i in 1:14) {
cat("Chromosome",i,"\n")
#chromosome <- sprintf("Pf3D7_%02d_v3",i)
dc <- subset(info, ChrIndex==i)
for (j in 1:nrow(dc)) {
if (dc$maf.pa[j]>=0.05) {
b <- dc$Position > dc$Position[j] & dc$Position < dc$Position[j] + 1000
alternates <- e$binary[base+j,]
for (k in (1:length(b))[b]) {
if (dc$maf.pa[k]>=0.05) {
temp <- calculateLD(alternates,e$binary[base+k,])
ld[count,] <- c(dc$Position[k]-dc$Position[j],temp$r2,temp$dp)
if (0 == count %% 1000) { cat(count,Sys.time () - start,"\n") }
count <- count + 1
}
}
}
}
base <- base + nrow(dc)
}
ld <- matrix(0,nrow=10000000,ncol=3)
start <- Sys.time ()
base <- 0
count <- 1
skipcount <- 0
partcount <- 0
for (i in 1:14) {
cat("Chromosome",i,"\n")
#chromosome <- sprintf("Pf3D7_%02d_v3",i)
dc <- subset(info, ChrIndex==i)
for (j in 1:nrow(dc)) {
if (dc$maf.pd[j]>=0.05) {
b <- dc$Position > dc$Position[j] & dc$Position < dc$Position[j] + 1000
alternates <- e$binary[base+j,]
for (k in (1:length(b))[b]) {
if (dc$maf.pd[k]>=0.05) {
temp <- calculateLD(alternates,e$binary[base+k,])
ld[count,] <- c(dc$Position[k]-dc$Position[j],temp$r2,temp$dp)
if (0 == count %% 1000) { cat(count,Sys.time () - start,"\n") }
count <- count + 1
}
}
}
}
base <- base + nrow(dc)
}
ld.pd <- ld[1:count,]
ld.pd <- data.frame(ld.pd)
colnames(ld.pd) <- c('distance','r2','D\'')
#save(ld.pt,file= "LD_pt_1000_MAFdblflag.Rdata")
ld.pd <- data.table(ld.pd)
ld.pd$bin <- cut(ld.pd$distance, 200)
ldbin.pd <- ld.pd[,list(r2=mean(r2), distance=median(distance)), by=bin]
write.table(ldbin.pd, 'LDbin_PD.txt', sep='\t', col.names=T, row.names=F, quote=F)
cat("Calls\n")
e <- list()
e$calls <- calls[,grep('PH',colnames(calls))]
cat("Reference\n")
e$ref <- matrix(rep(info$Major.ph,ncol(calls[,grep('PH',colnames(calls))])),nrow=nrow(calls),ncol=ncol(calls[,grep('PH',colnames(calls))]))
cat("Binary\n")
e$binary <- e$calls == e$ref
ld <- matrix(0,nrow=10000000,ncol=3)
start <- Sys.time ()
base <- 0
count <- 1
skipcount <- 0
partcount <- 0
for (i in 1:14) {
cat("Chromosome",i,"\n")
#chromosome <- sprintf("Pf3D7_%02d_v3",i)
dc <- subset(info, ChrIndex==i)
for (j in 1:nrow(dc)) {
if (dc$maf.ph[j]>=0.05) {
b <- dc$Position > dc$Position[j] & dc$Position < dc$Position[j] + 1000
alternates <- e$binary[base+j,]
for (k in (1:length(b))[b]) {
if (dc$maf.ph[k]>=0.05) {
temp <- calculateLD(alternates,e$binary[base+k,])
ld[count,] <- c(dc$Position[k]-dc$Position[j],temp$r2,temp$dp)
if (0 == count %% 1000) { cat(count,Sys.time () - start,"\n") }
count <- count + 1
}
}
}
}
base <- base + nrow(dc)
}
ld.ph <- ld[1:count,]
ld.ph <- data.frame(ld.ph)
colnames(ld.ph) <- c('distance','r2','D\'')
#save(ld.pt,file= "LD_pt_1000_MAFdblflag.Rdata")
ld.ph <- data.table(ld.ph)
ld.ph$bin <- cut(ld.ph$distance, 200)
ldbin.ph <- ld.ph[,list(r2=mean(r2), distance=median(distance)), by=bin]
write.table(ldbin.ph, 'LDbin_PH.txt', sep='\t', col.names=T, row.names=F, quote=F)
cat("Calls\n")
e <- list()
e$calls <- calls[,grep('PT',colnames(calls))]
cat("Reference\n")
e$ref <- matrix(rep(info$Major.pt,ncol(calls[,grep('PT',colnames(calls))])),nrow=nrow(calls),ncol=ncol(calls[,grep('PT',colnames(calls))]))
cat("Binary\n")
e$binary <- e$calls == e$ref
ld <- matrix(0,nrow=10000000,ncol=3)
start <- Sys.time ()
base <- 0
count <- 1
skipcount <- 0
partcount <- 0
for (i in 1:14) {
cat("Chromosome",i,"\n")
#chromosome <- sprintf("Pf3D7_%02d_v3",i)
dc <- subset(info, ChrIndex==i)
for (j in 1:nrow(dc)) {
if (dc$maf.pt[j]>=0.05) {
b <- dc$Position > dc$Position[j] & dc$Position < dc$Position[j] + 1000
alternates <- e$binary[base+j,]
for (k in (1:length(b))[b]) {
if (dc$maf.pt[k]>=0.05) {
temp <- calculateLD(alternates,e$binary[base+k,])
ld[count,] <- c(dc$Position[k]-dc$Position[j],temp$r2,temp$dp)
if (0 == count %% 1000) { cat(count,Sys.time () - start,"\n") }
count <- count + 1
}
}
}
}
base <- base + nrow(dc)
}
ld.pt <- ld[1:count,]
ld.pt <- data.frame(ld.pt)
colnames(ld.pt) <- c('distance','r2','D\'')
#save(ld.pt,file= "LD_pt_1000_MAFdblflag.Rdata")
ld.pt <- data.table(ld.pt)
ld.pt$bin <- cut(ld.pt$distance, 200)
ldbin.pt <- ld.pt[,list(r2=mean(r2), distance=median(distance)), by=bin]
write.table(ldbin.pt, 'LDbin_PT.txt', sep='\t', col.names=T, row.names=F, quote=F)
library(ggplot2)
library(grid)
library(RColorBrewer)
ldbin.all <- rbind(ldbin.pd,ldbin.ph,ldbin.pa,ldbin.pt)
popn <- c(rep(1,200),rep(2,200),rep(3,200),rep(4,200))
popn1 <- factor(popn, labels=c('Thailand','Cambodia','Gambia','Malawi'))
pal <- brewer.pal(4,'Set1')
hh <- ggplot(ldbin.all, aes(x=distance,y=r2,colour=popn1))
hh2<- hh + geom_line(size=0.8)
hh3 <- hh2 + theme_mine()
hh4 <- hh3 + scale_colour_manual(name='population', values=c(pal[4],pal[1],'orange',pal[3]))
hh5<- hh4 + xlab('pairwise distance (bases)') + ylab(expression(paste('linkage ', r^2)))
hh5 + scale_x_continuous(expand=c(0.01,0))
hh3 <- hh2 + theme_mine() + theme(legend.position=c(0.8,0.5))
hh4 <- hh3 + scale_colour_manual(name='population', values=c(pal[4],pal[1],'orange',pal[3]))
hh5<- hh4 + xlab('pairwise distance (bases)') + ylab(expression(paste('linkage ', r^2)))
hh5 + scale_x_continuous(expand=c(0.01,0))
acc.pa <- read.table('accuracy_pa.txt', header=T)
dat <- data.table(acc.pa)
meanr <- dat[,list('r2'=mean(r2_0), 'count'=.N), by=list(algo,mafsamp)]
sort <- c()
for (i in 1:4){
temp <- meanr[meanr$algo==i,]
temp <- temp[order(temp$mafsamp),]
sort[[i]] <- temp
}
meanr2.pa <- do.call('rbind', sort)
algo.pa <- factor(meanr2.pa$algo, labels=c('IMPUTE2/GMB','IMPUTE2/cosmopolitan','Beagle/GMB','Beagle/cosmopolitan'))
hh.pa <- ggplot(aes(x=mafsamp,y=r2), data=meanr2.pa)
hh.pa1 <- hh.pa + geom_line(aes(linetype=algo.pa),
#method=loess,span=0.7,se=TRUE,
colour='black',size=0.7)
hh.pa2 <- hh.pa1 + theme_mine() + theme(legend.position=c(0.65,0.5))
hh.pa3 <- hh.pa2 + scale_linetype_manual(values=c(1,3,2,4))
hh.pa4 <- hh.pa3 + scale_x_continuous(breaks=seq(0,0.6,by=0.1), limits=c(0,0.5)) + scale_y_continuous(breaks=seq(0,1,by=0.2), limits=c(0,1.05))
hh.pa5 <- hh.pa4 + xlab('subpopulation-wise minor allele frequency') + ylab(expression(paste('allelic',' ',r^2,sep=''))) + ggtitle('Gambia')
hh.pa6 <- hh.pa5 + geom_point(aes(x=mafsamp,y=r2), data=meanr2.pa[meanr2.pa$algo==2,], size=3, shape=2)
acc.pd <- read.table('accuracy_pd.txt', header=T)
dat <- data.table(acc.pd)
meanr <- dat[,list('r2'=mean(r2_0), 'count'=.N), by=list(algo,mafsamp)]
sort <- c()
for (i in 1:4){
temp <- meanr[meanr$algo==i,]
temp <- temp[order(temp$mafsamp),]
sort[[i]] <- temp
}
meanr2.pd <- do.call('rbind', sort)
algo.pd <- factor(meanr2.pd$algo, labels=c('IMPUTE2/THL','IMPUTE2/cosmopolitan','Beagle/THL','Beagle/cosmopolitan'))
hh.pd <- ggplot(aes(x=mafsamp,y=r2), data=meanr2.pd)
hh.pd1 <- hh.pd + geom_line(aes(linetype=algo.pd),
#method=loess,span=0.7,se=FALSE,
colour='black',size=0.7)
hh.pd2 <- hh.pd1 + theme_mine() + theme(legend.position=c(0.8,0.25))
hh.pd3 <- hh.pd2 + scale_linetype_manual(values=c(1,3,2,4))
hh.pd4 <- hh.pd3 + scale_x_continuous(breaks=seq(0,0.6,by=0.1), limits=c(0,0.5)) + scale_y_continuous(breaks=seq(0,1,by=0.2), limits=c(0,1.05))
hh.pd5 <- hh.pd4 + xlab('subpopulation-wise minor allele frequency') + ylab(expression(paste('allelic',' ',r^2,sep=''))) + ggtitle('Thailand')
hh.pd6 <- hh.pd5 + geom_point(aes(x=mafsamp,y=r2), data=meanr2.pd[meanr2.pd$algo==2,], size=3, shape=2)
acc.ph <- read.table('accuracy_ph.txt', header=T)
dat <- data.table(acc.ph)
meanr <- dat[,list('r2'=mean(r2_0), 'count'=.N), by=list(algo,mafsamp)]
sort <- c()
for (i in 1:4){
temp <- meanr[meanr$algo==i,]
temp <- temp[order(temp$mafsamp),]
sort[[i]] <- temp
}
meanr2.ph <- do.call('rbind', sort)
algo.ph <- factor(meanr2.ph$algo, labels=c('IMPUTE2/CBO','IMPUTE2/cosmopolitan','Beagle/CBO','Beagle/cosmopolitan'))
hh.ph <- ggplot(aes(x=mafsamp,y=r2), data=meanr2.ph)
hh.ph1 <- hh.ph + geom_line(aes(linetype=algo.ph),
#method=loess,span=0.7,se=FALSE,
colour='black',size=0.7)
hh.ph2 <- hh.ph1 + theme_mine() + theme(legend.position=c(0.8,0.25))
hh.ph3 <- hh.ph2 + scale_linetype_manual(values=c(1,3,2,4))
hh.ph4 <- hh.ph3 + scale_x_continuous(breaks=seq(0,0.6,by=0.1), limits=c(0,0.5)) + scale_y_continuous(breaks=seq(0,1,by=0.2), limits=c(0,1.05))
hh.ph5 <- hh.ph4 + xlab('subpopulation-wise minor allele frequency') + ylab(expression(paste('allelic',' ',r^2,sep=''))) + ggtitle('Cambodia')
hh.ph6 <- hh.ph5 + geom_point(aes(x=mafsamp,y=r2), data=meanr2.ph[meanr2.ph$algo==2,], size=3, shape=2)
acc.pt <- read.table('accuracy_pt.txt', header=T)
dat <- data.table(acc.pt)
meanr <- dat[,list('r2'=mean(r2_0), 'count'=.N), by=list(algo,mafsamp)]
sort <- c()
for (i in 1:4){
temp <- meanr[meanr$algo==i,]
temp <- temp[order(temp$mafsamp),]
sort[[i]] <- temp
}
meanr2.pt <- do.call('rbind', sort)
algo.pt <- factor(meanr2.pt$algo, labels=c('IMPUTE2/MLW','IMPUTE2/cosmopolitan','Beagle/MLW','Beagle/cosmopolitan'))
hh.pt <- ggplot(aes(x=mafsamp,y=r2), data=meanr2.pt)
hh.pt1 <- hh.pt + stat_summary(aes(linetype=algo.pt),fun.y=mean,geom='line',colour='black',size=0.7)
hh.pt2 <- hh.pt1 + theme_mine() + theme(legend.position=c(0.25,0.45))
hh.pt3 <- hh.pt2 + scale_linetype_manual(values=c(1,3,2,4))
hh.pt4 <- hh.pt3 + scale_x_continuous(breaks=seq(0,0.2,by=0.05), limits=c(0,0.22)) + scale_y_continuous(breaks=seq(0,1,by=0.2), limits=c(0,1.05))
hh.pt5 <- hh.pt4 + xlab('subpopulation-wise minor allele frequency') + ylab(expression(paste('allelic',' ',r^2,sep=''))) + ggtitle('Malawi')
hh.pt6 <- hh.pt5 + geom_point(aes(x=mafsamp,y=r2), data=meanr2.pt[meanr2.pt$algo==2,], size=3, shape=2)
grid.arrange(hh.pd6,hh.ph6,hh.pa6,hh.pt6,ncol=2)
setwd('/Users/hanif/')
rm(list=ls())
q()
setwd('Users/han')
setwd('/Users/hanif/Desktop/BoE/household-typology/')
?string sub
?substr
s <- 125000
substr(s,4,6) <- k
substr(s,4,6) <- 'k'
substr(as.character(s),4,6) <- 'k'
s <-as.character(s)
substr(s,4,6) <- 'k'
substr(s,4,6) <- 'k'
seq(25e3,125,e3,by=25e3)
seq(25e3,125e3,by=25e3)
?merge
load('mapcenters.rdata')
View(region_centers)
is.data.frame(region_centers)
setwd('/Users/hanif/Desktop/hh-typology/')
setwd('/Users/hanif/Desktop/hh-typology/household-typology-test/')
setwd('/Users/hanif/Desktop/BoE/household-typology-test/')
load('map.rdata')
load('mapcenters.rdata')
View(region_centers)
library(data.table)
library(gridExtra)
library(ggplot2)
library(RColorBrewer)
library(sp)
library(gpclib)
library(maptools)
gpclibPermit()
mapmaker <- function(data,clusterset,cluster,clustnum){
data$newclust <- clusterset
#survey population percentages
dat <- data.table(data)
summarytot <- dat[,list('freq'=.N),by=list(region)]
summarytot$percent <- summarytot$freq/sum(summarytot$freq)*100
#always include 2-cluster percentages
summaryclust2 <- dat[,list('freq'=.N),by=list(region,clust2)]
summaryclust2$percent <- 0
for (i in unique(summaryclust2$clust2)){
summary$percent[summary$clust2==i] <- summary$freq[summary$clust2==i]/sum(summary$freq[summary$clust2==i])*100
}
#cluster percentages
summary <- dat[,list('freq'=.N),by=list(region,newclust)]
summary$percent <- 0
for (i in unique(summary$newclust)){
summary$percent[summary$newclust==i] <- summary$freq[summary$newclust==i]/sum(summary$freq[summary$newclust==i])*100
}
summary$poppercent <- sapply(summary$region,function(x){y <- summarytot[summarytot$region==x,]$percent})
summary$diffpercent <- summary$percent-summary$poppercent
if(cluster==0 & clustnum=='Broad')
x <- summary[summary$newclust==1,]
else if(cluster==0 & clustnum=='Detailed')
x <- summaryclust2[summaryclust2==1,]
else
x <- summary[summary$newclust==cluster,]
return(x)
}
s2009 <- read.csv('s09.csv')
test <- mapmaker(s2009,s2009$clust2,1,'Broad')
mapmaker <- function(data,clusterset,cluster,clustnum){
data$newclust <- clusterset
#survey population percentages
dat <- data.table(data)
summarytot <- dat[,list('freq'=.N),by=list(region)]
summarytot$percent <- summarytot$freq/sum(summarytot$freq)*100
#always include 2-cluster percentages
summaryclust2 <- dat[,list('freq'=.N),by=list(region,clust2)]
summaryclust2$percent <- 0
for (i in unique(summaryclust2$clust2)){
summaryclust2$percent[summaryclust2$clust2==i] <- summaryclust2$freq[summaryclust2$clust2==i]/sum(summaryclust2$freq[summaryclust2$clust2==i])*100
}
#cluster percentages
summary <- dat[,list('freq'=.N),by=list(region,newclust)]
summary$percent <- 0
for (i in unique(summary$newclust)){
summary$percent[summary$newclust==i] <- summary$freq[summary$newclust==i]/sum(summary$freq[summary$newclust==i])*100
}
summary$poppercent <- sapply(summary$region,function(x){y <- summarytot[summarytot$region==x,]$percent})
summary$diffpercent <- summary$percent-summary$poppercent
if(cluster==0 & clustnum=='Broad')
x <- summary[summary$newclust==1,]
else if(cluster==0 & clustnum=='Detailed')
x <- summaryclust2[summaryclust2==1,]
else
x <- summary[summary$newclust==cluster,]
return(x)
}
test <- mapmaker(s2009,s2009$clust2,1,'Broad')
test1 <- test[test$newclust==1,]
View(test1)
getwd()
load('map.rdata')
boe <- fortify(boe, region='NAME')
yy <- ggplot() + geom_map(data=test1, aes(map_id=region,fill=diffpercent),map=boe) + expand_limits(x = boe$long, y = boe$lat)
yy1 <- yy + scale_fill_gradient2("Percentage difference from survey population",low='#D7301F',high='#238443',mid='white')
yy2
yy1
setwd('/Users/hanif/Desktop/BoE/household-typology/')
