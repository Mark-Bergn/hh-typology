for (i in 1:2){
y1 <- paste0("20", substring(var[i], 1, 2))
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=y1)),1, year )
}
mapmaker("region", data= eval(parse(text=y1)),1, year )
eval(parse(text=y1))
y1 <- paste0("s20",substring(var[2],1, 2))
eval(parse(text=y1))
mapmaker("region", data= eval(parse(text=y1)),1, year )
y1 <- paste0("s20",substring(var[1],1, 2))
eval(parse(text=y1))
for (i in 1:2){
y1 <- paste0("20", substring(var[i], 1, 2))
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=y1)),1, year )
}
for (i in 1:2){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempy)),1, year )
}
for (i in 1:2){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat paste0("s",tempy)
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
}
for (i in 1:2){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
}
boe$diff_09 <- mapmaker("region", s2009, 1,'2009'  )
new <- mapmaker("region", s2009, 1,'2009'  )
mapmaker <- function(name,data,cluster,year){
data$newregion <- data[,name]
#survey population percentages
dat <- data.table(data)
summarytot <- dat[,list('freq'=.N),by=list(newregion)]
summarytot$percent <- summarytot$freq/sum(summarytot$freq)*100
#Show 2-cluster percentages as default for 'All types' selection
summaryclust2 <- dat[,list('freq'=.N),by=list(newregion,clust2)]
summaryclust2$percent <- 0
for (i in unique(summaryclust2$clust2)){
summaryclust2$percent[summaryclust2$clust2==i] <- summaryclust2$freq[summaryclust2$clust2==i]/sum(summaryclust2$freq[summaryclust2$clust2==i])*100
}
summaryclust2$poppercent <- sapply(summaryclust2$newregion,function(x){y <- summarytot[summarytot$newregion==x,]$percent})
summaryclust2$diffpercent <- summaryclust2$percent-summaryclust2$poppercent
#cluster percentages
summary <- dat[,list('freq'=.N),by=list(newregion,clust2)]
#add missing E Anglia in 2009 Falling behind
if(year=='2009' & cluster==4){
summary <- rbind(data.frame(summary),data.frame('newregion'='E Anglia','clust'=4,'freq'=0))
summary$newregion <- as.factor(summary$newregion)
}
summary$percent <- 0
for (i in unique(summary$clust)){
summary$percent[summary$clust==i] <- summary$freq[summary$clust==i]/sum(summary$freq[summary$clust==i])*100
}
summary$poppercent <- sapply(summary$newregion,function(x){y <- summarytot[summarytot$newregion==x,]$percent})
summary$diffpercent <- summary$percent-summary$poppercent
if(cluster==0)
x <- summaryclust2[summaryclust2$clust2==1,]
else
x <- summary[summary$clust==cluster,]
# merge with centroids data to check
x$NAME <- x$newregion
return(x)
}
aa <- mapmaker("region", s2009, 1,'2009'  )
View(aa)
setwd("../data/")
regions  <- readOGR(dsn=".", layer="Regions")
##Uncomment for checking
#plot(regions)
#head(regions@data)
#table(regions$NAME)
load('GBR_adm1.RData')
##get scotland and wales
##remove England and Ireland
gadmsw  <- gadm[gadm$NAME_1 %in% c("Scotland", "Wales"), ]
##check
#plot(gadmsw)
#reproject data so they match
proj4string(gadm)
proj4string(regions)
regwgs84  <- spTransform(regions, CRSobj = CRS(proj4string(gadmsw)))
gadmsw  <- spTransform(gadmsw, CRSobj = CRS(proj4string(gadmsw)))
proj4string(regwgs84)
proj4string(gadmsw)
##Check they match
#plot(gadmsw)
#plot(regwgs84, add = T)
##Combine using spRbind
names(regwgs84)
names(gadmsw)
#Rename some vars and reduce to only them
gadmsw$NAME  <- as.factor(gadmsw$NAME_1)
gadmsw$AREA_CODE  <- as.factor(gadmsw$ID_1)
gadmsw$POLYGON_ID  <- as.numeric(gadmsw$PID)
gadmsw@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
gadmsw@data  <- gadmsw@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
regwgs84@data  <- regwgs84@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
#It won;'t bind due to duplicate of an arbritary id for the polygons this function makes them shape fiel
# specific
#To make them uniform we can write a function using the spChFIDs function from sp:
makeUniform<-function(SPDF){
pref<-substitute(SPDF)  #just putting the file name in front.
newSPDF<-spChFIDs(SPDF,as.character(paste(pref,rownames(as(SPDF,"data.frame")),sep="_")))
return(newSPDF)
}
regwgs84  <- makeUniform(regwgs84)
gadmsw  <- makeUniform(gadmsw)
#Now bind
boe  <- spRbind(regwgs84, gadmsw)
for (i in 1:2){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
}
mapmaker <- function(name,data,cluster,year){
data$newregion <- data[,name]
#survey population percentages
dat <- data.table(data)
summarytot <- dat[,list('freq'=.N),by=list(newregion)]
summarytot$percent <- summarytot$freq/sum(summarytot$freq)*100
#Show 2-cluster percentages as default for 'All types' selection
summaryclust2 <- dat[,list('freq'=.N),by=list(newregion,clust2)]
summaryclust2$percent <- 0
for (i in unique(summaryclust2$clust2)){
summaryclust2$percent[summaryclust2$clust2==i] <- summaryclust2$freq[summaryclust2$clust2==i]/sum(summaryclust2$freq[summaryclust2$clust2==i])*100
}
summaryclust2$poppercent <- sapply(summaryclust2$newregion,function(x){y <- summarytot[summarytot$newregion==x,]$percent})
summaryclust2$diffpercent <- summaryclust2$percent-summaryclust2$poppercent
#cluster percentages
summary <- dat[,list('freq'=.N),by=list(newregion,clust2)]
#add missing E Anglia in 2009 Falling behind
if(year=='2009' & cluster==4){
summary <- rbind(data.frame(summary),data.frame('newregion'='E Anglia','clust'=4,'freq'=0))
summary$newregion <- as.factor(summary$newregion)
}
summary$percent <- 0
for (i in unique(summary$clust)){
summary$percent[summary$clust==i] <- summary$freq[summary$clust==i]/sum(summary$freq[summary$clust==i])*100
}
summary$poppercent <- sapply(summary$newregion,function(x){y <- summarytot[summarytot$newregion==x,]$percent})
summary$diffpercent <- summary$percent-summary$poppercent
if(cluster==0)
x <- summaryclust2[summaryclust2$clust2==1,]
else
x <- summary[summary$clust==cluster,]
# merge with centroids data to check
x$NAME <- x$newregion
return(x$diffpercent)
}
for (i in 1:2){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
}
for (i in 1:length(var)){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
}
s2010 <- read.csv('s10.csv' , fileEncoding='latin1')
s2011 <- read.csv('s11.csv' , fileEncoding='latin1')
s2010 <- read.csv('s10.csv' )#, fileEncoding='latin1')
setwd('../household-typology-27April/')
s2010 <- read.csv('s10.csv' )#, fileEncoding='latin1')
s2011 <- read.csv('s11.csv')# , fileEncoding='latin1')
for (i in 1:length(var)){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
boe@data[[paste0(var[i])]] <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
}
head(boe)
head(boe@data)
head(boe@data)
mapmaker <- function(name,data,cluster,year){
data$newregion <- data[,name]
#survey population percentages
dat <- data.table(data)
summarytot <- dat[,list('freq'=.N),by=list(newregion)]
summarytot$percent <- summarytot$freq/sum(summarytot$freq)*100
#Show 2-cluster percentages as default for 'All types' selection
summaryclust2 <- dat[,list('freq'=.N),by=list(newregion,clust2)]
summaryclust2$percent <- 0
for (i in unique(summaryclust2$clust2)){
summaryclust2$percent[summaryclust2$clust2==i] <- summaryclust2$freq[summaryclust2$clust2==i]/sum(summaryclust2$freq[summaryclust2$clust2==i])*100
}
summaryclust2$poppercent <- sapply(summaryclust2$newregion,function(x){y <- summarytot[summarytot$newregion==x,]$percent})
summaryclust2$diffpercent <- summaryclust2$percent-summaryclust2$poppercent
#cluster percentages
summary <- dat[,list('freq'=.N),by=list(newregion,clust2)]
#add missing E Anglia in 2009 Falling behind
if(year=='2009' & cluster==4){
summary <- rbind(data.frame(summary),data.frame('newregion'='E Anglia','clust'=4,'freq'=0))
summary$newregion <- as.factor(summary$newregion)
}
summary$percent <- 0
for (i in unique(summary$clust)){
summary$percent[summary$clust==i] <- summary$freq[summary$clust==i]/sum(summary$freq[summary$clust==i])*100
}
summary$poppercent <- sapply(summary$newregion,function(x){y <- summarytot[summarytot$newregion==x,]$percent})
summary$diffpercent <- summary$percent-summary$poppercent
if(cluster==0)
x <- summaryclust2[summaryclust2$clust2==1,]
else
x <- summary[summary$clust==cluster,]
# merge with centroids data to check
x$NAME <- x$newregion
#return(x$diffpercent)
return(x)
}
new <- mapmaker("region", s2009, 1,'2009'  )
head(new)
head(new)
head(boe@data)
library(dplyr)
new$newregion
level(boe$NAME)
levels(boe$NAME)
levels(boe$NAME)  <-  c("E Midlands", "E Anglia", "Greater London", "North",
"North West", "South East", "South West", "W Midlands", "Yorks&Humber",
"Scotland", "Wales" )
levels(boe$NAME)
new$newregion
for (i in 1:length(var)){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
temp <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
temp[[paste0(var[i])]] <- temp$diffpercent
temp <- select(paste0(var[i]), NAME)
boe@data <- left_join(boe@data, temp)
}
for (i in 1:length(var)){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
temp <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
temp[[paste0(var[i])]] <- temp$diffpercent
temp <- temp %>% select(paste0(var[i]), NAME)
boe@data <- left_join(boe@data, temp)
}
for (i in 1:length(var)){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
temp <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
temp[[paste0(var[i])]] <- temp$diffpercent
temp <- temp %>% select(paste0(var[i]), "NAME")
boe@data <- left_join(boe@data, temp)
}
?select
x %>% select("poppercent")
x %>% select(poppercent)
for (i in 1:length(var)){
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
tempdat <-  paste0("s",tempy)
temp <-  mapmaker("region", data= eval(parse(text=tempdat)),1, year )
temp[[paste0(var[i])]] <- temp$diffpercent
temp <- temp %>% select(eval(parse(paste0(var[i]))), NAME)
boe@data <- left_join(boe@data, temp)
}
temp([paste0("newregion")])
temp[paste0("newregion"),]
data.frame(temp)[paste0("newregion"),]
for (i in 1:length(var)){
#get the year
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
# get the dataframe name
tempdat <-  paste0("s",tempy)
# create the dataset
temp <-  data.frame(mapmaker("region", data= eval(parse(text=tempdat)),1, year ))
# assign the variable I want
temp1 <- temp %>% select(, NAME)
temp1[[paste0(var[i])]] <- temp$diffpercent
boe@data <- left_join(boe@data, temp1)
}
for (i in 1:length(var)){
#get the year
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
# get the dataframe name
tempdat <-  paste0("s",tempy)
# create the dataset
temp <-  data.frame(mapmaker("region", data= eval(parse(text=tempdat)),1, year ))
# assign the variable I want
temp1 <- temp %>% select(NAME)
temp1[[paste0(var[i])]] <- temp$diffpercent
boe@data <- left_join(boe@data, temp1)
}
#read in Shape file of English Regions
regions  <- readOGR(dsn=".", layer="Regions")
##Uncomment for checking
#plot(regions)
#head(regions@data)
#table(regions$NAME)
##get scotland and wales
load('GBR_adm1.RData')
##remove England and Ireland
gadmsw  <- gadm[gadm$NAME_1 %in% c("Scotland", "Wales"), ]
##check
#plot(gadmsw)
#reproject data so they match
proj4string(gadm)
proj4string(regions)
regwgs84  <- spTransform(regions, CRSobj = CRS(proj4string(gadmsw)))
gadmsw  <- spTransform(gadmsw, CRSobj = CRS(proj4string(gadmsw)))
proj4string(regwgs84)
proj4string(gadmsw)
##Check they match
#plot(gadmsw)
#plot(regwgs84, add = T)
##Combine using spRbind
names(regwgs84)
names(gadmsw)
#Rename some vars and reduce to only them
gadmsw$NAME  <- as.factor(gadmsw$NAME_1)
gadmsw$AREA_CODE  <- as.factor(gadmsw$ID_1)
gadmsw$POLYGON_ID  <- as.numeric(gadmsw$PID)
gadmsw@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
gadmsw@data  <- gadmsw@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
regwgs84@data  <- regwgs84@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
#It won;'t bind due to duplicate of an arbritary id for the polygons this function makes them shape fiel
# specific
#To make them uniform we can write a function using the spChFIDs function from sp:
makeUniform<-function(SPDF){
pref<-substitute(SPDF)  #just putting the file name in front.
newSPDF<-spChFIDs(SPDF,as.character(paste(pref,rownames(as(SPDF,"data.frame")),sep="_")))
return(newSPDF)
}
regwgs84  <- makeUniform(regwgs84)
gadmsw  <- makeUniform(gadmsw)
#Now bind
boe  <- spRbind(regwgs84, gadmsw)
levels(boe$NAME)
#Make the NAME match with our BOE data, this is what will wil merge on
levels(boe$NAME)  <- c("E Midlands", "E Anglia", "Greater London",
"North",	"North West", "South East",
"South West",	"W Midlands",	"Yorks&Humber", "Scotland",
for (i in 1:length(var)){
#get the year
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
# get the dataframe name
tempdat <-  paste0("s",tempy)
# create the dataset
temp <-  data.frame(mapmaker("region", data= eval(parse(text=tempdat)),1, year ))
# assign the variable I want
temp1 <- temp %>% select(NAME)
temp1[[paste0(var[i])]] <- temp$diffpercent
boe@data <- left_join(boe@data, temp1)
}
""
levels(boe$NAME)  <- c("E Midlands", "E Anglia", "Greater London",
"North",	"North West", "South East",
"South West",	"W Midlands",	"Yorks&Humber", "Scotland",  "Wales")
for (i in 1:length(var)){
#get the year
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
# get the dataframe name
tempdat <-  paste0("s",tempy)
# create the dataset
temp <-  data.frame(mapmaker("region", data= eval(parse(text=tempdat)),1, year ))
# assign the variable I want
temp1 <- temp %>% select(NAME)
temp1[[paste0(var[i])]] <- temp$diffpercent
boe@data <- left_join(boe@data, temp1)
}
head(boe@data)
head(x = new)
var
cl <- substring(paste0(var[1]), 6,6)
cl <- substring(paste0(var[2]), 6,6)
boe@data %>% select(-contains("c"))
boe@data %>% select(-contains("c2", "c4"))
boe@data %>% select(-contains("c2"| "c4"))
boe@data %>% select(-contains("c2"), -contains("c4"))
boe@data %>% select(-contains("c2"))
boe@data %>% select(-contains("_c2"))
#read in Shape file of English Regions
regions  <- readOGR(dsn=".", layer="Regions")
##Uncomment for checking
#plot(regions)
#head(regions@data)
#table(regions$NAME)
##get scotland and wales
load('GBR_adm1.RData')
##remove England and Ireland
gadmsw  <- gadm[gadm$NAME_1 %in% c("Scotland", "Wales"), ]
##check
#plot(gadmsw)
#reproject data so they match
proj4string(gadm)
proj4string(regions)
regwgs84  <- spTransform(regions, CRSobj = CRS(proj4string(gadmsw)))
gadmsw  <- spTransform(gadmsw, CRSobj = CRS(proj4string(gadmsw)))
proj4string(regwgs84)
proj4string(gadmsw)
##Check they match
#plot(gadmsw)
#plot(regwgs84, add = T)
##Combine using spRbind
names(regwgs84)
names(gadmsw)
#Rename some vars and reduce to only them
gadmsw$NAME  <- as.factor(gadmsw$NAME_1)
gadmsw$AREA_CODE  <- as.factor(gadmsw$ID_1)
gadmsw$POLYGON_ID  <- as.numeric(gadmsw$PID)
gadmsw@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
gadmsw@data  <- gadmsw@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
regwgs84@data  <- regwgs84@data[,c("NAME", "AREA_CODE", "POLYGON_ID")]
#It won;'t bind due to duplicate of an arbritary id for the polygons this function makes them shape fiel
# specific
#To make them uniform we can write a function using the spChFIDs function from sp:
makeUniform<-function(SPDF){
pref<-substitute(SPDF)  #just putting the file name in front.
newSPDF<-spChFIDs(SPDF,as.character(paste(pref,rownames(as(SPDF,"data.frame")),sep="_")))
return(newSPDF)
}
regwgs84  <- makeUniform(regwgs84)
gadmsw  <- makeUniform(gadmsw)
#Now bind
boe  <- spRbind(regwgs84, gadmsw)
levels(boe$NAME)
#Make the NAME match with our BOE data, this is what will wil merge on
levels(boe$NAME)  <- c("E Midlands", "E Anglia", "Greater London",
"North",	"North West", "South East",
"South West",	"W Midlands",	"Yorks&Humber", "Scotland",  "Wales")
for (i in 1:length(var)){
#get the year
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
# get the dataframe name
tempdat <-  paste0("s",tempy)
# create the dataset
cl <- substring(paste0(var[i]), 6,6)
temp <-  data.frame(mapmaker("region", data= eval(parse(text=tempdat)), cl, year ))
# assign the variable I want
temp1 <- temp %>% select(NAME)
temp1[[paste0(var[i])]] <- temp$diffpercent
boe@data <- left_join(boe@data, temp1)
}
plot(boe)
plot(boe[boe$NAME == "E Midlands", ], col="blue", add=T) #E Anglia
plot(boe[boe$NAME == "E Anglia", ], col="blue", add=T) # E Midlands
plot(boe[boe$NAME == "Greater London", ], col="blue", add=T) # Fine
placenames  <- c("East Midlands", "East Anglia",  "London", "North East",
"North West", "Scotland", "South East",
"South West", "Wales","West Midlands" ,"Yorkshire & Humber")
library(leaflet)
boe$placenames  <- c("East Midlands", "East Anglia",  "London", "North East",
"North West", "Scotland", "South East",
"South West", "Wales","West Midlands" ,"Yorkshire & Humber")
var
infotip  <- paste0("Region: <b>", boe$NAME, "</b><br>",
boe$value, "<br>, boe$placenames")
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(value), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip) %>% # draw polygons with color fill
addLegend(position = "bottomleft", colors = ~cl, labels = ~vl) %>% # not working yet
setView(-2, 55, zoom = 5) %>% #tell where to start the view
addTiles() # have a background map. Might note be needed.
cl <- pal(boe$value)
pal <- colorQuantile("YlGn", NULL, n = 3)
cl <- pal(boe$value)
vl <- boe$value
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(value), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip) %>% # draw polygons with color fill
addLegend(position = "bottomleft", colors = ~cl, labels = ~vl) %>% # not working yet
setView(-2, 55, zoom = 5) %>% #tell where to start the view
addTiles() # have a background map. Might note be needed.
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(09_2c1), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip)
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(boe$09_2c1), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip)
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(boe$09_2c1), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip)
boe$a <- boe$092_c1
boe$a <- boe$09_2c1
for (i in 1:length(var)){
#get the year
tempy <- paste0("20", substring(paste0(var[i]), 1, 2))
# get the dataframe name
tempdat <-  paste0("s",tempy)
# create the dataset
cl <- substring(paste0(var[i]), 6,6)
temp <-  data.frame(mapmaker("region", data= eval(parse(text=tempdat)), cl, year ))
# assign the variable I want
temp1 <- temp %>% select(NAME)
temp1[[paste0("a", var[i])]] <- temp$diffpercent
boe@data <- left_join(boe@data, temp1)
}
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(boe$a09_2c1), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip)
infotip  <- paste0("Region: <b>", boe$NAME, "</b><br>",
boe$a09_2c1, "<br>", boe$placenames)
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(boe$a09_2c1), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip)
boe$placenames  <- c("East Midlands", "East Anglia",  "London",
"North East", "North West", "South East",
"South West", "West Midlands" ,
"Yorkshire & Humber", "Scotland", "Wales")
infotip  <- paste0("Region: <b>", boe$NAME, "</b><br>",
boe$a09_2c1, "<br>", boe$placenames)
leaflet(data= boe) %>% #tell where the data is
addPolygons(fillColor = ~pal(boe$a09_2c1), fillOpacity = 0.8, color = "#BDBDC3",
weight = 1, popup = infotip)
head(boe@data)
levels(boe$NAME)
levels(boe$NAME)
boe$NAME
